{"ast":null,"code":"import _classCallCheck from \"/Users/johnrendleman/fantasybball/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/johnrendleman/fantasybball/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/johnrendleman/fantasybball/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/johnrendleman/fantasybball/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/johnrendleman/fantasybball/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/johnrendleman/fantasybball/src/components/Graph.js\";\nimport React from \"react\";\nimport Plot from 'react-plotly.js';\n\nfunction parseStats(currentStat, playerData) {\n  switch (currentStat) {\n    case \"Points\":\n      return playerData.map(function (player) {\n        return player.ppg;\n      });\n\n    case \"Rebounds\":\n      return playerData.map(function (player) {\n        return player.reb;\n      });\n\n    case \"Assists\":\n      return playerData.map(function (player) {\n        return player.ast;\n      });\n\n    case \"Steals\":\n      return playerData.map(function (player) {\n        return player.stl;\n      });\n\n    case \"Blocks\":\n      return playerData.map(function (player) {\n        return player.blk;\n      });\n\n    case \"3-PT%\":\n      return playerData.map(function (player) {\n        return player.tpt;\n      });\n\n    case \"FT%\":\n      return playerData.map(function (player) {\n        return player.ft;\n      });\n\n    case \"FG%\":\n      return playerData.map(function (player) {\n        return player.fg;\n      });\n\n    case \"Turnovers\":\n      return playerData.map(function (player) {\n        return player.to;\n      });\n\n    default:\n      return playerData.map(function (player) {\n        return player.name;\n      });\n  }\n}\n\nfunction getData(props) {\n  switch (this.props.graphType) {\n    case \"pieStyle\":\n      return data = [{\n        type: 'pie',\n        values: [19, 26, 55],\n        labels: ['Residential', 'Non-Residential', 'Utility']\n      }];\n\n    case \"barStyle\":\n      return data = [{\n        type: 'bar',\n        x: this.props.playerData.map(function (player) {\n          return player.name;\n        }),\n        y: parseStats(this.props.statOptions[0], this.props.playerData)\n      }];\n\n    case \"lineStyle\":\n      return data = [{\n        x: parseStats(this.props.statOptions[0], this.props.playerData),\n        y: parseStats(this.props.statOptions[1], this.props.playerData),\n        type: 'scatter',\n        mode: 'lines',\n        marker: {\n          color: 'red'\n        }\n      }];\n\n    case \"scatterStyle\":\n      return data = [{\n        x: parseStats(this.props.statOptions[0], this.props.playerData),\n        y: parseStats(this.props.statOptions[1], this.props.playerData),\n        text: this.props.playerData.map(function (player) {\n          return player.name;\n        }),\n        type: 'scatter',\n        mode: 'markers',\n        textposition: \"top\",\n        marker: {\n          color: 'red'\n        }\n      }];\n\n    default:\n      return null;\n  }\n}\n\nvar Graph =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Graph, _React$Component);\n\n  function Graph(props) {\n    var _this;\n\n    _classCallCheck(this, Graph);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Graph).call(this, props));\n    _this.graphType = props.graphType;\n    _this.data = props.data;\n    return _this;\n  }\n\n  _createClass(Graph, [{\n    key: \"render\",\n    value: function render() {\n      if (this.props.statOptions == null || this.props.graphType == null || this.props.playerData == null) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        });\n      }\n\n      data = getData(this.props);\n      return React.createElement(Plot, {\n        className: \"graph\",\n        data: data,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Graph;\n}(React.Component);\n\nexport default Graph;","map":{"version":3,"sources":["/Users/johnrendleman/fantasybball/src/components/Graph.js"],"names":["React","Plot","parseStats","currentStat","playerData","map","player","ppg","reb","ast","stl","blk","tpt","ft","fg","to","name","getData","props","graphType","data","type","values","labels","x","y","statOptions","mode","marker","color","text","textposition","Graph","Component"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport Plot from 'react-plotly.js'\n\nfunction parseStats(currentStat, playerData) {\n    switch (currentStat) {\n        case \"Points\":\n            return playerData.map(player => player.ppg);\n        case \"Rebounds\":\n            return playerData.map(player => player.reb);\n        case \"Assists\":\n            return playerData.map(player => player.ast);\n        case \"Steals\":\n            return playerData.map(player => player.stl);\n        case \"Blocks\":\n            return playerData.map(player => player.blk);\n        case \"3-PT%\":\n            return playerData.map(player => player.tpt);\n        case \"FT%\":\n            return playerData.map(player => player.ft);\n        case \"FG%\":\n            return playerData.map(player => player.fg);\n        case \"Turnovers\":\n            return playerData.map(player => player.to);\n        default:\n            return playerData.map(player => player.name);\n    }\n}\n\nfunction getData(props) {\n    switch(this.props.graphType) {\n            case \"pieStyle\":\n                    return data=[\n                        {\n                        type: 'pie',\n                        values: [19, 26, 55],\n                        labels: ['Residential', 'Non-Residential', 'Utility']\n                        }\n                    ]\n                    \n            case \"barStyle\":\n                    return data=[\n                        {\n                        type: 'bar',\n                        x: this.props.playerData.map(player => player.name),\n                        y: parseStats(this.props.statOptions[0], this.props.playerData)\n                        }\n                    ]\n\n            case \"lineStyle\":\n                    return data=[\n                        {\n                        x: parseStats(this.props.statOptions[0], this.props.playerData),\n                        y: parseStats(this.props.statOptions[1], this.props.playerData),\n                        type: 'scatter',\n                        mode: 'lines',\n                        marker: {color: 'red'},\n                        }\n                    ]\n            case \"scatterStyle\":\n                    return data=[\n                        {\n                        x: parseStats(this.props.statOptions[0], this.props.playerData),\n                        y: parseStats(this.props.statOptions[1], this.props.playerData),\n                        text: this.props.playerData.map(player => player.name),\n                        type: 'scatter',\n                        mode: 'markers',\n                        textposition: \"top\",\n                        marker: {color: 'red'},\n                        }\n                    ]\n            default:\n                return null\n        }\n}\n\n\nclass Graph extends React.Component {\n    constructor(props) {\n        super(props);\n        this.graphType = props.graphType;\n        this.data = props.data;\n    }\n    \n    \n    render() {\n        if (this.props.statOptions == null || this.props.graphType == null || this.props.playerData == null) {\n            return (<div></div>)\n        }\n                   \n        data = getData(this.props)\n            \n        return(\n            <Plot className=\"graph\"\n                data={data}\n            />\n        )\n\n            \n    \n    }\n}\n\n\nexport default Graph"]},"metadata":{},"sourceType":"module"}