{"ast":null,"code":"import _classCallCheck from \"/Users/johnrendleman/fantasybball/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/johnrendleman/fantasybball/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/johnrendleman/fantasybball/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/johnrendleman/fantasybball/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/johnrendleman/fantasybball/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/johnrendleman/fantasybball/src/components/Graph.js\";\nimport React from \"react\";\nimport Plot from 'react-plotly.js';\n\nfunction parseStats(currentStat, playerData) {\n  switch (currentStat) {\n    case \"Points\":\n      return playerData.map(function (player) {\n        return player.ppg;\n      });\n\n    case \"Rebounds\":\n      return playerData.map(function (player) {\n        return player.reb;\n      });\n\n    case \"Assists\":\n      return playerData.map(function (player) {\n        return player.ast;\n      });\n\n    case \"Steals\":\n      return playerData.map(function (player) {\n        return player.stl;\n      });\n\n    case \"Blocks\":\n      return playerData.map(function (player) {\n        return player.blk;\n      });\n\n    case \"3-PT%\":\n      return playerData.map(function (player) {\n        return player.tpt;\n      });\n\n    case \"FT%\":\n      return playerData.map(function (player) {\n        return player.ft;\n      });\n\n    case \"FG%\":\n      return playerData.map(function (player) {\n        return player.fg;\n      });\n\n    case \"Turnovers\":\n      return playerData.map(function (player) {\n        return player.to;\n      });\n\n    default:\n      return playerData.map(function (player) {\n        return player.name;\n      });\n  }\n}\n\nfunction getData(props) {\n  switch (props.graphType) {\n    case \"barStyle\":\n      return [{\n        type: 'bar',\n        x: props.playerData.map(function (player) {\n          return player.name;\n        }),\n        y: parseStats(props.statOptions[0], props.playerData)\n      }];\n\n    case \"lineStyle\":\n      var traces = [];\n      var colors = ['red', 'blue', 'purple', 'orange', 'black', 'teal'];\n\n      for (var i = 0; i < props.statOptions.length; i++) {\n        traces.push({\n          x: props.playerData.map(function (player) {\n            return player.name;\n          }),\n          y: parseStats(props.statOptions[i], props.playerData),\n          type: 'scatter',\n          mode: 'lines',\n          name: props.statOptions[i],\n          marker: {\n            color: colors[i % 6]\n          }\n        });\n      }\n\n      return traces;\n\n    case \"scatterStyle\":\n      return [{\n        x: parseStats(props.statOptions[0], props.playerData),\n        y: parseStats(props.statOptions[1], props.playerData),\n        text: props.playerData.map(function (player) {\n          return player.name;\n        }),\n        type: 'scatter',\n        mode: 'markers',\n        textposition: \"top\",\n        marker: {\n          color: 'red'\n        }\n      }];\n\n    default:\n      return null;\n  }\n}\n\nfunction getAxisNames(props) {\n  var names = [];\n\n  if (props.statOptions.length == 0) {\n    return names;\n  }\n\n  if (props.statOptions.length < 2) {\n    names.push(props.statOptions[0]);\n    names.push(\"Player\");\n  } else {\n    names.push(props.statOptions[0]);\n    names.push(props.statOptions[1]);\n  }\n\n  return names;\n}\n\nvar Graph =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Graph, _React$Component);\n\n  function Graph(props) {\n    var _this;\n\n    _classCallCheck(this, Graph);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Graph).call(this, props));\n    _this.graphType = props.graphType;\n    _this.data = props.data;\n    return _this;\n  }\n\n  _createClass(Graph, [{\n    key: \"render\",\n    value: function render() {\n      if (this.props.statOptions == null || this.props.graphType == null || this.props.playerData == null) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        });\n      }\n\n      var data = getData(this.props);\n      var axesNames = getAxisNames(this.props);\n\n      if (axesNames.length == 0) {\n        axesNames.push(\"\");\n        axesNames.push(\"\");\n      }\n\n      var x = axesNames[0];\n      var y = axesNames[1];\n      console.log(x);\n      console.log(y);\n      return React.createElement(Plot, {\n        className: \"graph\",\n        data: data,\n        layout: {\n          plot_bgcolor: \"none\",\n          scene: {\n            xaxis: {\n              name: {\n                x: x\n              }\n            },\n            yaxis: {\n              name: {\n                y: y\n              }\n            }\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Graph;\n}(React.Component);\n\nexport default Graph;","map":{"version":3,"sources":["/Users/johnrendleman/fantasybball/src/components/Graph.js"],"names":["React","Plot","parseStats","currentStat","playerData","map","player","ppg","reb","ast","stl","blk","tpt","ft","fg","to","name","getData","props","graphType","type","x","y","statOptions","traces","colors","i","length","push","mode","marker","color","text","textposition","getAxisNames","names","Graph","data","axesNames","console","log","plot_bgcolor","scene","xaxis","yaxis","Component"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport Plot from 'react-plotly.js'\n\nfunction parseStats(currentStat, playerData) {\n    switch (currentStat) {\n        case \"Points\":\n            return playerData.map(player => player.ppg);\n        case \"Rebounds\":\n            return playerData.map(player => player.reb);\n        case \"Assists\":\n            return playerData.map(player => player.ast);\n        case \"Steals\":\n            return playerData.map(player => player.stl);\n        case \"Blocks\":\n            return playerData.map(player => player.blk);\n        case \"3-PT%\":\n            return playerData.map(player => player.tpt);\n        case \"FT%\":\n            return playerData.map(player => player.ft);\n        case \"FG%\":\n            return playerData.map(player => player.fg);\n        case \"Turnovers\":\n            return playerData.map(player => player.to);\n        default:\n            return playerData.map(player => player.name);\n    }\n}\n\nfunction getData(props) {\n    switch(props.graphType) {\n            case \"barStyle\":\n                    return [\n                        {\n                        type: 'bar',\n                        x: props.playerData.map(player => player.name),\n                        y: parseStats(props.statOptions[0], props.playerData)\n                        }\n                    ]\n\n            case \"lineStyle\":\n                    let traces = [];\n                    let colors = ['red', 'blue', 'purple', 'orange', 'black', 'teal']\n                    for (let i = 0; i < props.statOptions.length; i++) {\n                        traces.push({\n                            x: props.playerData.map(player => player.name),\n                            y: parseStats(props.statOptions[i], props.playerData),\n                            type: 'scatter',\n                            mode: 'lines',\n                            name: props.statOptions[i],\n                            marker: {color: colors[i % 6]},\n                        });\n                    }\n                    \n                    return traces\n            case \"scatterStyle\":\n                    return [\n                        {\n                        x: parseStats(props.statOptions[0], props.playerData),\n                        y: parseStats(props.statOptions[1], props.playerData),\n                        text: props.playerData.map(player => player.name),\n                        type: 'scatter',\n                        mode: 'markers',\n                        textposition: \"top\",\n                        marker: {color: 'red'},\n                        }\n                    ]\n            default:\n                return null\n        }\n}\n\nfunction getAxisNames(props) {\n    let names = [];\n    \n    if (props.statOptions.length == 0) {\n        return names\n    }\n    \n    if (props.statOptions.length < 2) {\n        names.push(props.statOptions[0]);\n        names.push(\"Player\");\n    } else {\n        names.push(props.statOptions[0]);\n        names.push(props.statOptions[1]);\n    }\n    \n    return names;\n}\n\n\nclass Graph extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        this.graphType = props.graphType;\n        this.data = props.data;\n    }\n    \n    \n    render() {\n        if (this.props.statOptions == null || this.props.graphType == null || this.props.playerData == null) {\n            return (<div></div>)\n        }\n                   \n        let data = getData(this.props);\n        let axesNames = getAxisNames(this.props);\n        if (axesNames.length == 0) {\n            axesNames.push(\"\");\n            axesNames.push(\"\")\n        }\n        \n        let x = axesNames[0];\n        let y = axesNames[1];\n        console.log(x);\n        console.log(y);\n            \n        return(\n            <Plot className=\"graph\"\n                data={data}\n                layout={{\n                    plot_bgcolor: \"none\",\n                    scene: {\n                        xaxis: {\n                            name: {x}\n                        },\n                        yaxis: {\n                            name: {y}\n                        }\n                    }}\n                }\n            />\n        )\n\n            \n    \n    }\n}\n\n\nexport default Graph"]},"metadata":{},"sourceType":"module"}